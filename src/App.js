import React, { useState, useEffect } from 'react';
import bridge from '@vkontakte/vk-bridge';
import './App.css';

function App() {
  const [step, setStep] = useState(0);
  const [score, setScore] = useState(0);
  const [showResult, setShowResult] = useState(false);

  useEffect(() => {
    bridge.send('VKWebAppInit');
  }, []);

  const questions = [
    {
      text: '–¢—ã –ª—é–±–∏—à—å —Å–ø–∞—Ç—å –¥–Ω—ë–º?',
      options: [
        { answer: '–î–∞', value: 2 },
        { answer: '–ò–Ω–æ–≥–¥–∞', value: 1 },
        { answer: '–ù–µ—Ç', value: 0 },
      ],
    },
    {
      text: '–¢—ã –±–æ–∏—à—å—Å—è –≤–æ–¥—ã?',
      options: [
        { answer: '–û—á–µ–Ω—å', value: 2 },
        { answer: '–°–∫–æ—Ä–µ–µ –¥–∞', value: 1 },
        { answer: '–ù–µ—Ç', value: 0 },
      ],
    },
    {
      text: '–¢—ã –ª—é–±–∏—à—å —Å–∏–¥–µ—Ç—å –Ω–∞ –æ–∫–Ω–µ –∏ —Å–º–æ—Ç—Ä–µ—Ç—å –≤ –æ–∫–Ω–æ?',
      options: [
        { answer: '–î–∞, —ç—Ç–æ –º–æ—ë –≤—Å—ë', value: 2 },
        { answer: '–ò–Ω–æ–≥–¥–∞', value: 1 },
        { answer: '–ù–µ—Ç, —Å–∫—É—á–Ω–æ', value: 0 },
      ],
    },
  ];

  const results = [
    {
      title: '–°–æ–Ω–Ω–∞—è –±—Ä–∏—Ç–∞–Ω–∫–∞',
      description: '–¢—ã ‚Äî –≤–æ–ø–ª–æ—â–µ–Ω–∏–µ —É—é—Ç–∞. –û–±–æ–∂–∞–µ—à—å –º—è–≥–∫–∏–µ –ø–æ–¥—É—à–∫–∏, –Ω–µ—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏ –∏ —Ö–æ—Ä–æ—à–∏–π —Å–æ–Ω.',
      image: '/images/british_cat.png',
    },
    {
      title: '–ò–≥—Ä–∏–≤–∞—è —Å—Ñ–∏–Ω–∫—Å',
      description: '–£ —Ç–µ–±—è –Ω–µ—É–µ–º–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –∏ —Ç—è–≥–∞ –∫ –≤–Ω–∏–º–∞–Ω–∏—é. –õ—é–±–∏—à—å –±—ã—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–µ —Å–æ–±—ã—Ç–∏–π.',
      image: '/images/sphynx_cat.png',
    },
    {
      title: '–ó–∞–¥—É–º—á–∏–≤—ã–π —Å–∏–±–∏—Ä—è–∫',
      description: '–ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∏ –º—É–¥—Ä–æ—Å—Ç—å ‚Äî —Ç–≤–æ–π —Å—Ç–∏–ª—å. –¢—ã –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–Ω –∏ —Ü–µ–Ω–∏—à—å –ª–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ.',
      image: '/images/siberian_cat.png',
    },
    {
      title: '–ë–æ–µ–≤–æ–π –º–µ–π–Ω-–∫—É–Ω',
      description: '–¢—ã —É–≤–µ—Ä–µ–Ω –≤ —Å–µ–±–µ, –≥—Ä–æ–º–∫–∏–π –∏ —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π. –í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –∏ –∑–∞—â–∏—â–∞—Ç—å —Å–≤–æ–∏—Ö.',
      image: '/images/maine_coon_cat.png',
    },
  ];

  const handleAnswer = async (value) => {
    const nextStep = step + 1;
    setScore(score + value);
    if (nextStep >= questions.length) {
      try {
        await bridge.send('VKWebAppShowNativeAds', { ad_format: 'interstitial' });
      } catch (error) {
        console.warn('–†–µ–∫–ª–∞–º–∞ –Ω–µ –ø–æ–∫–∞–∑–∞–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', error);
      }
      setShowResult(true);
    } else {
      setStep(nextStep);
    }
  };

  const restart = () => {
    setScore(0);
    setStep(0);
    setShowResult(false);
  };

  const getResult = () => {
    if (score <= 2) return results[0];
    if (score <= 4) return results[1];
    if (score <= 5) return results[2];
    return results[3];
  };

  const shareResult = async () => {
    const result = getResult();
    const message = `–Ø –ø—Ä–æ—à—ë–ª —Ç–µ—Å—Ç ¬´–ö–∞–∫–æ–π —Ç—ã –∫–æ—Ç–∏–∫?¬ª –∏ –æ–∫–∞–∑–∞–ª—Å—è: ${result.title} üò∫ –ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è —Ç–æ–∂–µ!`;
    try {
      await bridge.send('VKWebAppShare', {
        link: 'https://AntonSeimToo.github.io/vk-cat-test/',
        text: message,
      });
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:', error);
    }
  };

  return (
    <div className="App">
      {!showResult ? (
        <div className="question-block">
          <h2>{questions[step].text}</h2>
          {questions[step].options.map((opt, idx) => (
            <button key={idx} onClick={() => handleAnswer(opt.value)}>
              {opt.answer}
            </button>
          ))}
        </div>
      ) : (
        <div className="result-block fade-in">
          <h2>{getResult().title}</h2>
          <img src={getResult().image} alt="cat result" />
          <p>{getResult().description}</p>
          <button onClick={restart} style={{ marginTop: '20px' }}>
            –ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑
          </button>
          <button
            onClick={shareResult}
            style={{
              marginTop: '10px',
              backgroundColor: '#4a76a8',
              color: 'white',
              padding: '10px 20px',
              border: 'none',
              borderRadius: '8px',
              cursor: 'pointer',
            }}
          >
            üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
          </button>
        </div>
      )}
    </div>
  );
}

export default App;
